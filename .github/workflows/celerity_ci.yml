name: CMake

on:
  # Run workflow on any push to any branch.
  push:
  # Also run on internal PRs. The difference to the "push" trigger
  # being, that the workflow will run on the result of merging the PR's
  # commits into the target branch.
  pull_request:
    branches-ignore:
      # Ignore branches from forks (which contain a colon).
      - '**:**'
  # Finally, also run on external PRs. By using the "_target" trigger,
  # we can ensure that the workflow definition itself will always come
  # from the main repository, not the fork (for security reasons).
  pull_request_target:
    branches:
      # Only consider branches from forks (which contain a colon).
      - '**:**'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ./build_block -DCMAKE_BUILD_TYPE=Release -DdirectCNLincl=true -DCMAKE_PREFIX_PATH="./dependencies/bin;./dependencies/include;./dependencies/lib/;./dependencies/lib/cmake;./dependencies/lib/CronosNumLib;./dependencies/include/CronosNumLib;/usr/include/openmpi-x86_64;/usr/lib/cmake"

    - name: Build
      # Build your program with the given configuration
      run: |
        cmake --build ./build_block --config Release

    - name: Test
      working-directory: ${{github.workspace}}/build_block
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        ctest .
    
    - name: Print Error File
      if: failure()
      working-directory: ${{github.workspace}}/build_block
      run: |
        cat ./CMakeFiles/CMakeError.log
      
